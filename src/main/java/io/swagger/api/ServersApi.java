/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Server;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-06-26T14:37:15.545Z")

@Validated
@Api(value = "servers", description = "the servers API")
@RequestMapping(value = "/api")
public interface ServersApi {

    @ApiOperation(value = "Add a new server / update existing server", nickname = "addServer", notes = "", tags={ "server", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Server Added"),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/servers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> addServer(@ApiParam(value = "Server object that needs to be added" ,required=true )  @Valid @RequestBody Server body);


    @ApiOperation(value = "Deletes a server", nickname = "deleteServer", notes = "", tags={ "server", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Server Deleted"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Server not found") })
    @RequestMapping(value = "/servers/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteServer(@ApiParam(value = "Server to delete",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Finds Servers by name", nickname = "findByName", notes = "", response = Server.class, responseContainer = "List", tags={ "server", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Server.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No such server found") })
    @RequestMapping(value = "/servers/find",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Server>> findByName(@NotNull @ApiParam(value = "Complete or partial name of the server", required = true) @Valid @RequestParam(value = "name", required = true) String name);


    @ApiOperation(value = "Find server by ID", nickname = "getServer", notes = "Returns a single server", response = Server.class, tags={ "server", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Server.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Server not found") })
    @RequestMapping(value = "/servers/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Server> getServer(@ApiParam(value = "ID of server to return",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Get list of all servers", nickname = "getServers", notes = "", response = Server.class, responseContainer = "List", tags={ "server", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Server.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No servers found") })
    @RequestMapping(value = "/servers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Server>> getServers();

}
